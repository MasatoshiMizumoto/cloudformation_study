AWSTemplateFormatVersion: 2010-09-09
Description: my CloudFormation study.
Resources:
  S3AllRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: s3-all-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  S3IAMPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: S3AllRole
    Properties:
      PolicyName: S3IAMPolicy
      Roles:
        - !Ref S3AllRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn: S3AllRole
    Properties:
      Path: /
      Roles:
        - !Ref S3AllRole
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: test
  myIGW:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: myVPC
    Properties:
      Tags:
        - Key: Name
          Value: IGW
  AttachGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: myIGW
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW
  myRouteT:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: AttachGW
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test
  defaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref myRouteT
      GatewayId: !Ref myIGW
  mySubnet1a:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGW
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test-1a
  mySubnet1c:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGW
    Properties:
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test-1c
  SubnetRT1a:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: mySubnet1a
    Properties:
      RouteTableId: !Ref myRouteT
      SubnetId: !Ref mySubnet1a
  SubnetRT1c:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: mySubnet1c
    Properties:
      RouteTableId: !Ref myRouteT
      SubnetId: !Ref mySubnet1c
  myDHCPopt:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: ap-northeast-1.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: test
  dchpassoc1:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    DependsOn: myDHCPopt
    Properties:
      VpcId: !Ref myVPC
      DhcpOptionsId: !Ref myDHCPopt
  myNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test
  NwAclRuleOutAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref myNetworkAcl
  NwAclRuleInAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref myNetworkAcl
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref myNetworkAcl
      SubnetId: !Ref mySubnet1a
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref myNetworkAcl
      SubnetId: !Ref mySubnet1c
  mySgEC2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: my Security Group
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: test
  sgRuleInHttp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  sgRuleInSsh:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  sgRuleInMySQL:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: 0.0.0.0/0
  sgRuleInRailsweb:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      CidrIp: 0.0.0.0/0
  sgRuleInHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  sgRuleOutALL:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref mySgEC2
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  mySgRDS:
    Type: 'AWS::RDS::DBSecurityGroup'
    DependsOn: mySgEC2
    Properties:
      GroupDescription: EC2 same security.
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
  mySgRDSIn:
    Type: 'AWS::RDS::DBSecurityGroupIngress'
    Properties:
      DBSecurityGroupName: !Ref mySgRDS
      CIDRIP: 0.0.0.0/0
  myInstanceEC2:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGW
    Properties:
      AvailabilityZone: ap-northeast-1a
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-00d101850e971728d
      InstanceType: t2.micro
      KeyName: RaiseTech
      Monitoring: false
      Tags:
        - Key: Name
          Value: test
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: EC2-NWI with public access
          DeviceIndex: 0
          SubnetId: !Ref mySubnet1a
          GroupSet:
            - !Ref mySgEC2
  mySubnetgRDS:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: subnet for RDS
      SubnetIds:
        - !Ref mySubnet1a
        - !Ref mySubnet1c
  myDBparamUtf8mb4:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: character code set to utf8mb4
      Family: mysql5.7
      Parameters:
        binlog_cache_size: 32768
        binlog_format: MIXED
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        default_password_lifetime: 0
        explicit_defaults_for_timestamp: 1
        gtid-mode: OFF_PERMISSIVE
        innodb_buffer_pool_size: '{DBInstanceClassMemory*3/4}'
      Tags:
        - Key: Name
          Value: test
  myInstanceRDS:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: myIGW
    Properties:
      AvailabilityZone: ap-northeast-1a
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t2.micro
      Port: 3306
      StorageType: gp2
      BackupRetentionPeriod: 0
      MasterUsername: master
      MasterUserPassword: MyPassword
      PreferredBackupWindow: '20:22-20:52'
      PreferredMaintenanceWindow: 'tue:13:40-tue:14:10'
      PubliclyAccessible: false
      DBName: MyDatabase
      Engine: mysql
      EngineVersion: 5.7.22
      LicenseModel: general-public-license
      DBSubnetGroupName: !Ref mySubnetgRDS
      DBParameterGroupName: !Ref myDBparamUtf8mb4
      VPCSecurityGroups:
        - !Ref mySgEC2
      Tags:
        - Key: Name
          Value: test
  myS3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Name
          Value: test
  MyALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref myVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: MyALBTargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: test
      Targets:
        - Id: !Ref myInstanceEC2
      TargetType: instance
  MyALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: MyALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref mySgEC2
      Subnets:
        - !Ref mySubnet1a
        - !Ref mySubnet1c
      Tags:
        - Key: Name
          Value: test
  MyALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref MyALBTargetGroup
          Type: forward
